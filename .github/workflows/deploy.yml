name: Build & Publish (Windows + macOS)

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Select platforms to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - macos-only
          - windows-only
      release_tag:
        description: 'Release tag to use when manually dispatching (e.g. v1.2.3). If empty and triggered by tag/release, the tag from event will be used.'
        required: false
      publish:
        description: 'Whether to upload artifacts to GitHub Release (true/false)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

concurrency:
  group: build-and-publish-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

env:
  NODE_VERSION: '24'
  ELECTRON_BUILDER_OUT: dist

jobs:
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get version from package.json
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache (improved)
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-node-${{ matrix.node_version || env.NODE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-pnpm-store-

      - name: Cache Electron binaries
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\electron\Cache
            ~\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Fetch packages to pnpm store (fast path)
        run: |
          # fetch will populate the pnpm store if network is needed
          pnpm fetch || true

      - name: Install dependencies (pnpm) (use offline when possible)
        run: |
          # try offline install first (fast if store/cache present), fallback to normal install
          pnpm install --offline --frozen-lockfile || pnpm install --frozen-lockfile
        shell: bash

      - name: Build renderer & main
        run: pnpm run build:win
        shell: bash

      - name: Upload windows artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/**

  build-macos:
    name: Build macOS Installer
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Electron binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/electron
            ~/Library/Caches/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Install dependencies (pnpm)
        run: |
          if [ -f pnpm-lock.yaml ] ; then
            pnpm install --frozen-lockfile
          else
            pnpm install
          fi
        shell: bash

      - name: Build renderer & main
        run: pnpm run build:mac
        shell: bash

      - name: Upload mac artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: mac-dist
          path: dist/**

  publish:
    name: Create GitHub Release & Upload Assets
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-macos
    if: ${{ github.event.inputs.publish != 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: package-version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Determine release tag
        id: tag_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_tag }}" ]; then
            echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          elif [ -n "${GITHUB_REF}" ] && echo "${GITHUB_REF}" | grep -q '^refs/tags/'; then
            REF_NAME="${GITHUB_REF#refs/tags/}"
            echo "tag=${REF_NAME}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
            echo "tag=untagged-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Download windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-dist
          path: artifacts/windows

      - name: Download mac artifacts
        uses: actions/download-artifact@v4
        with:
          name: mac-dist
          path: artifacts/macos

      - name: Publish GitHub Release and upload .exe/.dmg only
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_info.outputs.tag }}
          name: ${{ steps.tag_info.outputs.tag }}
          body: |
            Automated release for ${{ steps.tag_info.outputs.tag }}
          draft: false
          prerelease: false
          # 只匹配 .exe（Windows）和 .dmg（macOS）
          files: |
            artifacts/windows/*.exe
            artifacts/macos/*.dmg
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Finish
        run: echo "✅ Release ${{ steps.tag_info.outputs.tag }} created and .exe/.dmg assets uploaded."



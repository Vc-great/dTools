/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ManageRouteRouteImport } from './routes/manage/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ManageSettingsIndexRouteImport } from './routes/manage/settings/index'
import { Route as ManageDeployIndexRouteImport } from './routes/manage/deploy/index'

const ManageRouteRoute = ManageRouteRouteImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManageSettingsIndexRoute = ManageSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => ManageRouteRoute,
} as any)
const ManageDeployIndexRoute = ManageDeployIndexRouteImport.update({
  id: '/deploy/',
  path: '/deploy/',
  getParentRoute: () => ManageRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/manage': typeof ManageRouteRouteWithChildren
  '/manage/deploy': typeof ManageDeployIndexRoute
  '/manage/settings': typeof ManageSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/manage': typeof ManageRouteRouteWithChildren
  '/manage/deploy': typeof ManageDeployIndexRoute
  '/manage/settings': typeof ManageSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/manage': typeof ManageRouteRouteWithChildren
  '/manage/deploy/': typeof ManageDeployIndexRoute
  '/manage/settings/': typeof ManageSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/manage' | '/manage/deploy' | '/manage/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/manage' | '/manage/deploy' | '/manage/settings'
  id: '__root__' | '/' | '/manage' | '/manage/deploy/' | '/manage/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ManageRouteRoute: typeof ManageRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/manage': {
      id: '/manage'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manage/settings/': {
      id: '/manage/settings/'
      path: '/settings'
      fullPath: '/manage/settings'
      preLoaderRoute: typeof ManageSettingsIndexRouteImport
      parentRoute: typeof ManageRouteRoute
    }
    '/manage/deploy/': {
      id: '/manage/deploy/'
      path: '/deploy'
      fullPath: '/manage/deploy'
      preLoaderRoute: typeof ManageDeployIndexRouteImport
      parentRoute: typeof ManageRouteRoute
    }
  }
}

interface ManageRouteRouteChildren {
  ManageDeployIndexRoute: typeof ManageDeployIndexRoute
  ManageSettingsIndexRoute: typeof ManageSettingsIndexRoute
}

const ManageRouteRouteChildren: ManageRouteRouteChildren = {
  ManageDeployIndexRoute: ManageDeployIndexRoute,
  ManageSettingsIndexRoute: ManageSettingsIndexRoute,
}

const ManageRouteRouteWithChildren = ManageRouteRoute._addFileChildren(
  ManageRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ManageRouteRoute: ManageRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
